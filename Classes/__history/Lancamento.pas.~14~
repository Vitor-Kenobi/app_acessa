unit Lancamento;

interface

uses FireDAC.Comp.Client, FireDAC.DApt, System.SysUtils, FMX.Graphics;

type
    TLancamento = class

    private

        Fconn: TFDConnection;
        Fdescricao: string;
        Fvalor: string;
        Fdata: TDateTime;
        Ficone: TBitmap;
        Fid_materia: Integer;
        Fcategoria: string;

    public

        constructor Create(conn: TFDConnection);
        property id_materia: Integer read Fid_materia write Fid_materia;
        property valor: string read Fvalor write Fvalor;
        property data: TDateTime read Fdata write Fdata;
        property descricao: string read Fdescricao write Fdescricao;
        property categoria: string read Fcategoria write Fcategoria;
        property icone: TBitmap read Ficone write Ficone;

        //function ListarLancamento(qtd_result: integer; out erro: string): TFDQuery;
        //function Inserir(out erro: string): Boolean;
        //function Alterar(out erro: string): Boolean;
        //function Excluir(out erro: string): Boolean;
end;

implementation

{ TLancamentos }

constructor TLancamento.Create(conn: TFDConnection);
begin
    Fconn := conn;
end;


function TLancamento.Inserir(out erro: string): Boolean;
var
    qry : TFDQuery;
begin
    // Validações

    if descricao = '' then
    begin
        erro := 'Informe o a descrição da matéria ou conteúdo que deseja adicionar!';
        Result := false;
        exit;
    end;


    try
        try
            qry := TFDQuery.Create(nil);
            qry.Connection := Fconn;

            with qry do
            begin
                Active := false;
                SQL.Clear;
                SQL.Add('INSERT INTO materias(categoria, valor, data, descricao, icone)');
                ParamByName('valor').Value := valor;
                ParamByName('data').Value := Fdata;
                ParamByName('descricao').Value := descricao;
                ExecSQL;
            end;

            Result := true;
            erro := '';

        except on ex:exception do
        begin
            Result := False;
            erro := 'Erro ao inserir lançamento: ' + ex.Message;
        end;
        end;

    finally
        qry.DisposeOf;
    end;
end;


function TLancamento.Alterar(out erro: string): Boolean;
var
    qry : TFDQuery;
begin
    // Validacoes...
    if ID_LANCAMENTO <= 0 then
    begin
        erro := 'Informe o lançamento';
        Result := false;
        exit;
    end;

    if DESCRICAO = '' then
    begin
        erro := 'Informe a descrição do lançamento';
        Result := false;
        exit;
    end;


    try
        try
            qry := TFDQuery.Create(nil);
            qry.Connection := Fconn;

            with qry do
            begin
                Active := false;
                SQL.Clear;
                SQL.Add('UPDATE TAB_LANCAMENTO SET ID_CATEGORIA=:ID_CATEGORIA, VALOR=:VALOR, ');
                SQL.Add('DATA=:DATA, DESCRICAO=:DESCRICAO ');
                SQL.Add('WHERE ID_LANCAMENTO = :ID_LANCAMENTO');
                ParamByName('ID_LANCAMENTO').Value := ID_LANCAMENTO;
                ParamByName('VALOR').Value := VALOR;
                ParamByName('DATA').Value := FDATA;
                ParamByName('DESCRICAO').Value := DESCRICAO;
                ExecSQL;
            end;

            Result := true;
            erro := '';

        except on ex:exception do
        begin
            Result := False;
            erro := 'Erro ao alterar lançamento: ' + ex.Message;
        end;
        end;

    finally
        qry.DisposeOf;
    end;
end;


function TLancamento.Excluir(out erro: string): Boolean;
var
    qry : TFDQuery;
begin
    // Validacoes...
    if ID_LANCAMENTO <= 0 then
    begin
        erro := 'Informe o lançamento';
        Result := false;
        exit;
    end;

    try
        try
            qry := TFDQuery.Create(nil);
            qry.Connection := Fconn;

            with qry do
            begin
                Active := false;
                SQL.Clear;
                SQL.Add('DELETE FROM TAB_LANCAMENTO');
                SQL.Add('WHERE ID_LANCAMENTO = :ID_LANCAMENTO');
                ParamByName('ID_LANCAMENTO').Value := ID_LANCAMENTO;
                ExecSQL;
            end;

            Result := true;
            erro := '';

        except on ex:exception do
        begin
            Result := False;
            erro := 'Erro ao excluir o lançamento: ' + ex.Message;
        end;
        end;

    finally
        qry.DisposeOf;
    end;
end;


function TLancamento.ListarLancamento(qtd_result: integer;
                                      out erro: string): TFDQuery;
var
    qry : TFDQuery;
begin
    try
        qry := TFDQuery.Create(nil);
        qry.Connection := Fconn;

        with qry do
        begin
            Active := false;
            sql.Clear;
            sql.Add('SELECT L.*, C.DESCRICAO AS DESCRICAO_CATEGORIA, C.ICONE');
            sql.Add('FROM TAB_LANCAMENTO L');
            sql.Add('JOIN TAB_CATEGORIA C ON (C.ID_CATEGORIA = L.ID_CATEGORIA)');
            sql.Add('WHERE 1 = 1');

            if ID_LANCAMENTO > 0 then
            begin
                SQL.Add('AND L.ID_LANCAMENTO = :ID_LANCAMENTO');
                ParamByName('ID_LANCAMENTO').Value := ID_LANCAMENTO;
            end;

            if (DATA_DE <> '') AND (DATA_ATE <> '') then
                SQL.Add('AND L.DATA BETWEEN ''' + DATA_DE + ''' AND ''' + DATA_ATE + '''');

            sql.Add('ORDER BY L.DATA DESC');

            if qtd_result > 0 then
                sql.Add('LIMIT ' + qtd_result.ToString);

            Active := true;
        end;

        Result := qry;
        erro := '';

    except on ex:exception do
    begin
        Result := nil;
        erro := 'Erro ao consultar categorias: ' + ex.Message;
    end;
    end;
end;


end.
